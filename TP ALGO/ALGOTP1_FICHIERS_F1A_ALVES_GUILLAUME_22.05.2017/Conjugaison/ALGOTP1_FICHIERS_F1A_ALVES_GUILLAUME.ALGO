ALGO:
BUT:	Traitement des fichiers.
		Reprise et élargissement du programme conjugaison.

		=> tableaux, boucles, Text, gestion de fichiers pour conjuguer verbes au présent de l'indicatif.
		Supports mis à disposition :la 1ère version de conjugaison.
		
ENTREES:
SORTIES:

CONST
	CheminAcces=("C:\Users\Tamen\Desktop\Ludus\TP ALGO\Algos\Conjugaison\F.txt")
	CheminAcces2=("C:\Users\Tamen\Desktop\Ludus\TP ALGO\Algos\Conjugaison\Verbes_IR_3eme.txt")
	CheminAcces3=("C:\Users\Tamen\Desktop\Ludus\TP ALGO\Algos\Conjugaison\Conj.txt")
	RetourLigne=10
	nb_verbes=13
	nb_pronoms=6
	1er_Car=1
	VerbALLER="aller"
	
TYPE
	t_Pronoms=ENREGISTREMENT
		Je:CHAINE
		Tu:CHAINE
		Il:CHAINE
		Nous:CHAINE
		Vous:CHAINE
		Ils:CHAINE
FIN ENREGISTREMENT

TYPE
	tab_verbe:TABLEAU[1..nb_verbes]DE CHAINE
	Verbe=(1er,2eme,3eme)
	
VAR
	F:FICHIER TEXTE
	Conj:FICHIER TEXTE
	Pronoms:t_Pronoms
	liste:tab_verbe

{Méthodes à implémenter en fonction du langage:

FichierExiste(NomFichier) : Vérifie si un fichier existe sur le disque dur
Minuscule(Chaine) : Convertit une chaine de caractères en son équivalent en minuscules
Eof(Fichier): Vérifie que la fin d'un fichier n'est pas atteinte lors de sa lecture ligne par ligne
}
	
	
FONCTION Voyelle(t_car:CARACTERE):BOOLEEN

{BUT: Vérifier si un caractère est une voyelle
ENTREES: Caractère
SORTIES: Retourne la valeur du test}
	
	VAR
		test:BOOLEEN

DEBUT
	test<-FAUX
	t_car<-Minuscule(t_car)
	test<-((t_car="a") OU (t_car="e") OU (t_car="i") OU (t_car="o") OU (t_car="u") OU (t_car="y"))
	Voyelle<-test
FIN

FONCTION Verbe_1er(t_chaine:CHAINE):BOOLEEN

{BUT: Déterminer si une chaine de caractères est un verbe du premier groupe
ENTREES: Chaine de caractères
SORTIES: Retourne la valeur du test, si la chaine est un verbe du premier groupe}

	VAR
		test_chaine:CHAINE
		test:BOOLEEN
DEBUT
	test<-FAUX
	test_chaine<-Minuscule(EXTRACTION(t_chaine,longueur(chaine)-1,2))
	test<-((test_chaine="er") ET (t_chaine<>VerbALLER))
	Verbe_1er<-test
FIN

FONCTION Verbe_2eme(t_chaine:CHAINE):BOOLEEN

{BUT: Déterminer si une chaine de caractères est un verbe du deuxième groupe
ENTREES: Chaine de caractères
SORTIES: Retourne la valeur du test, si la chaine est un verbe du deuxième groupe}

	VAR
		test_chaine:CHAINE
		test:BOOLEEN
DEBUT
	test<-VerifChaineFichier(t_chaine)
	Verbe_2eme<-NON test
FIN



FONCTION VerifChaineFichier(t_chaine:CHAINE):BOOLEEN

{BUT: Vérifier si une chaîne appartient à un fichier texte
ENTREES: Chaine de caractères
SORTIES: Retourne la valeur du test si la chaine appartient au fichier}

	VAR
		test:BOOLEEN
		test_chaine:CHAINE
		t_F:FICHIER TEXTE
DEBUT
	ASSIGNER(t_F,CheminAcces2)
	test<-FAUX
	OUVRIR(t_F)
	TANT QUE NON Eof(t_F) FAIRE
		LIRE(t_F,test_chaine)
			SI test_chaine=t_chaine ALORS
				test<-VRAI
			FIN SI
	FIN TANT QUE
	FERMER(t_F)
	VerifChaineFichier<-test
FIN

FONCTION Conjugaison(t_chaine:CHAINE):Verbe

{BUT: Appeler la procédure de conjugaison correspondante en fonction du résultat du test de groupe
ENTREES: Chaine de caractères
SORTIES: Appels des procédures correspondantes}

DEBUT
	SI Verbe_1er(t_chaine) ALORS
		Conjugaison<-1er
		Conjug_1er(t_chaine)
	SINON
		SI Verbe_2eme(t_chaine) ALORS
			Conjugaison<-2eme
			Conjug_2eme(t_chaine)
		SINON
			Conjugaison<-3eme
			Conjug_3eme(t_chaine)
		FIN SI
	FIN SI
FIN

PROCEDURE Conjug_1er(t_chaine:CHAINE)

{BUT: Conjuguer un verbe du premier groupe
ENTREES: Chaine de caractères
SORTIES: Assignation des variables pronoms personnels }

	VAR
		test_chaine:CHAINE

DEBUT
	SI Voyelle(t_chaine[1er_Car]) ALORS
		Pronoms.Je<-("J'" & Minuscule(EXTRACTION(t_chaine,1er_Car,longueur(t_chaine)-1)))
	SINON
		Pronoms.Je<-Minuscule(EXTRACTION(t_chaine,1,longueur(t_chaine)-1))
	test_chaine<-Minuscule(EXTRACTION(t_chaine,longueur(t_chaine)-2,3))
	CAS test_chaine PARMI
		"ger":
				DEBUT
					Pronoms.Nous<-Minuscule(EXTRACTION(t_chaine,1er_Car,longueur(t_chaine)-1)&"ons")
				FIN
		"cer":
				DEBUT
					Pronoms.Nous<-Minuscule(EXTRACTION(t_chaine,1er_Car,longueur(t_chaine)-3)&"ons")
				FIN
	PAR DEFAUT
		Pronoms.Nous<-Minuscule(EXTRACTION(test_chaine,1er_Car,longueur(test_chaine)-1) & "ons")
	FIN CAS PARMI
	test_chaine<-Minuscule(t_chaine)
	Pronoms.Tu<-Minuscule(EXTRACTION(test_chaine,1er_Car,longueur(test_chaine)-1) & "s")
	Pronoms.Il<-Minuscule(EXTRACTION(test_chaine,1er_Car,longueur(test_chaine)-1 & "t")
	Pronoms.Vous<-Minuscule(EXTRACTION(test_chaine,1er_Car,longueur(test_chaine)-1 & "z")
	Pronoms.Ils<-Minuscule(EXTRACTION(test_chaine,1er_Car,longueur(test_chaine)-1 & "nt")
	
FIN

PROCEDURE Conjug_2eme(t_chaine:CHAINE)

{BUT: Conjuguer un verbe du deuxième groupe
ENTREES: Chaine de caractères
SORTIES: Assignation des variables pronoms personnels}

	VAR
		test_chaine:CHAINE

DEBUT
	Pronoms.Je<-(EXTRACTION(test_chaine,1er_Car,longueur(test_chaine)-1 & "s")
	Pronoms.Tu<-(EXTRACTION(test_chaine,1er_Car,longueur(test_chaine)-1 & "s")
	Pronoms.Il<-(EXTRACTION(test_chaine,1er_Car,longueur(test_chaine)-1 & "t")
	Pronoms.Nous<-(EXTRACTION(test_chaine,1er_Car,longueur(test_chaine)-1 & "ssons")
	Pronoms.Vous<-(EXTRACTION(test_chaine,1er_Car,longueur(test_chaine)-1 & "ssez")
	Pronoms.Ils<-(EXTRACTION(test_chaine,1er_Car,longueur(test_chaine)-1 & "ssent")
FIN

PROCEDURE Conjug_3eme(t_chaine:CHAINE)

{BUT:
ENTREES:
SORTIES:}

DEBUT
FIN

PROCEDURE Afficher_fichier(t_F:FICHIER TEXTE)

{BUT: Afficher le contenu d'un fichier texte
ENTREES: Fichier texte
SORTIES: Affichage contenu fichier texte}

	VAR
		test_chaine:CHAINE

DEBUT
	OUVRIR(t_F)
		TANT QUE NON Eof(t_F) FAIRE
			LIRE(t_F,test_chaine)
			ECRIRE(test_chaine)
		FIN TANT QUE
	FERMER(t_F)
FIN

PROCEDURE Init_Pronoms

{BUT: Initialiser les pronoms de la variable globale Pronoms 
ENTREES: /
SORTIES: Assignation pronoms}

DEBUT
	Pronoms.Je<-("Je ")
	Pronoms.Tu<-("Tu ")
	Pronoms.Il<-("Il ")
	Pronoms.Nous<-("Nous ")
	Pronoms.Vous<-("Vous ")
	Pronoms.Ils<-("Ils ")
FIN

PROCEDURE Init(var t_liste:tab_verbe)

{BUT: Initialiser la liste de verbes en paramètres
ENTREES: Variable de type tab_verbe
SORTIES: Paramètre var}

DEBUT
	liste[1]<-"RIRE"
	liste[2]<-"RECEVOIR"
	liste[3]<-"ALLER"
	liste[4]<-"BOUILLIR"
	liste[5]<-"ENVOYER"
	liste[6]<-"PEINDRE"
	liste[7]<-"HABITER"
	liste[8]<-"PAYER"
	liste[9]<-"MOURIR"
	liste[10]<-"HAIR"
	liste[11]<-"VOULOIR"
	liste[12]<-"FINIR"
	liste[13]<-"S'AMUSER"
FIN


PROCEDURE Init_1

{BUT: Initialiser un fichier en l'ouvrant avec la méthode d'écriture AJOUT
ENTREES:	/
SORTIES: Appel de la procédure Ecriture_Init}

DEBUT
	AJOUTER(F)
	Ecriture_Init(F)
	FERMER(F)
FIN

PROCEDURE Init_2

{BUT: Initialiser un fichier en l'ouvrant avec la méthode REECRITURE
ENTREES:	/
SORTIES: Appel de la procédure Ecriture_Init}

DEBUT
	REECRIRE(F)
	Ecriture_Init(F)
	FERMER(F)
FIN

PROCEDURE Ecriture_Init(t_F:FICHIER TEXTE)

{BUT: Ecrire dans un fichier entré en paramètres les verbes constants ci-dessous
ENTREES: Fichier ouvert de type Texte
SORTIES: Ecriture dans le fichier ouvert}

	VAR
		i:ENTIER

DEBUT
	POUR i DE 1 A nb_verbes FAIRE
		ECRIRE(t_F,liste[i] & CHR(RetourLigne))
FIN

VAR
	i:ENTIER
DEBUT
	ASSIGNER(F,CheminAcces)
	ASSIGNER(Conj,CheminAcces3)
	Init(liste)
	Init_Pronoms
	SI FichierExiste(F) ALORS// Fonction qui vérifie si le fichier existe sur le disque ou non
		Init_1
	SINON
		Init_2
	FIN SI
	POUR i DE 1 A nb_verbes FAIRE
		CAS Conjugaison(liste[i]) PARMI
			1er:ECRIRE("Verbe du premier groupe")
			2eme:ECRIRE("Verbe du deuxième groupe")
			3eme:ECRIRE("Verbe du troisième groupe")
		FIN CAS PARMI
		AJOUTER(Conj)
			ECRIRE(Conj,Pronoms.Je & CHR(RetourLigne))
			ECRIRE(Conj,Pronoms.Tu& CHR(RetourLigne))
			ECRIRE(Conj,Pronoms.Il& CHR(RetourLigne))
			ECRIRE(Conj,Pronoms.Nous& CHR(RetourLigne))
			ECRIRE(Conj,Pronoms.Vous& CHR(RetourLigne))
			ECRIRE(Conj,Pronoms.Ils& CHR(RetourLigne))
		FERMER(Conj)
		Affichier_fichier(Conj)
	FIN POUR
FIN